//ClientSocket.java
//##Description##
//Creates the socket and then sets up two threads, one for input on the socket, one for output
//Handles passes output messages generated by MainActivity to the outputSocket thread for sending.

package com.example.holoterrainandroid;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;

import android.os.AsyncTask;
import android.os.Handler;
import android.util.Log;

public class ClientSocket extends AsyncTask<Handler, Void, Void>{
	Output_SocketThread out_Thread; //Thread for sending across socket
	Input_SocketThread in_Thread; //Thread for receiving from socket
	String modeConfirmation; //Holds the current line to check for a mode confirmation message through socket
	boolean modeConfirmed; //Identifies whether the currently sent mode has been recognized by the zSpace code
	
	protected Void doInBackground(Handler... msgs){
		//Logcat tags
		final String NETWORK_GENERAL_TAG = "Socket";
		final String NETWORK_CONTENT_TAG = "SocketMsg";
		final String CONTEXT_TAG = "ClientSocket";
		modeConfirmation = null;
		modeConfirmed = true;
		Log.d(CONTEXT_TAG, "***Starting AsyncTask***");
		
		Socket clientSocket = null;
		
		// Accept a client for the server
		//*******IP ADDRESS MUST MATCH THE IP ADDRESS OF THE PC RUNNING THE ZSPACE CODE**********
		try
		{
			//hci_lab_1-PC
			//clientSocket = new Socket("130.179.30.170", 60010);
			
			//Z_Space-PC
			clientSocket = new Socket("130.179.30.127", 60010);
		} 
		catch (IOException e) 
		{
			System.out.println("IOException: "+ e);
			Log.e("IOException", "Accept failed");
			System.exit(-1);
		}
		Log.d(NETWORK_GENERAL_TAG, "Client Socket Created");


		Log.d(NETWORK_GENERAL_TAG, "Creating Input Socket Thread");
		in_Thread = new Input_SocketThread(clientSocket, msgs[0]);
		in_Thread.start();

		Log.d(NETWORK_GENERAL_TAG, "Creating Output Socket Thread");
		out_Thread = new Output_SocketThread(clientSocket, msgs[0]);
		out_Thread.start();
		
		confirm();

		return null;

	}
	
	//Changes the string to be output through socket
	public void setOutputString(String line){

		out_Thread.outputLine = line;
		modeConfirmation = line;
		out_Thread.newCommand = true;
		modeConfirmed = false;
	}
	
	public boolean sendMessage(String line){
		boolean result = false;
		
		if(isSetup()){
			out_Thread.outputLine = line;
			modeConfirmation = line;
			out_Thread.newCommand = true;
			modeConfirmed = false;
			
			result = true;
		}
		
		return result;
	}
	
	//Checks to see if the current mode is confirmed or not
	public void updateModeConfirmation(String line){

		if(line.equals("CFM," + modeConfirmation)){
			modeConfirmed = true;
		}
	}
	
	//Ensures commands are re-sent until confirmation is received
	public void confirm(){
		while(true){
			if(!modeConfirmed){
				out_Thread.newCommand = true;
			}
			
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	//Check if the input/output sockets are setup and ready to be used
	public boolean isSetup(){
		boolean result = false;
		if(out_Thread != null && in_Thread != null){
			if(out_Thread.isSetup && in_Thread.isSetup){
				result = true;
			}
		}
		
		return result;
	}

}


